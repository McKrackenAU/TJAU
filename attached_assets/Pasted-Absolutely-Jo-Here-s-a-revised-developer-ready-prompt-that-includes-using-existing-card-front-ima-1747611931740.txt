Absolutely, Jo! Here’s a revised, developer-ready prompt that includes using existing card front images, and only generating new images (in the same style and colour format) for any missing cards.

---

## App Issue Fix Prompt: Tarot Card Image Loading (with Existing Images)

### Background

- **Problem:** Tarot card front images are slow to load, sometimes fail to load, and occasionally show inconsistent images for the same card. The default fallback sometimes overlays the card.
- **Current System:**  
  - Images are generated via OpenAI API only once per card.
  - Generated images are cached in `/cache/images/` and metadata is stored in a JSON file.
  - On card reveal, the app checks for a cached image; if not found, it generates one and caches it.

### Updated Requirements

1. **Leverage Existing Images:**  
   - Use all existing card front images as the primary source.
   - Only generate new images for cards that are missing an image.
2. **Style Consistency:**  
   - Any newly generated images must match the style and colour format of the existing card fronts.
3. **Consistent & Fast Loading:**  
   - Each card must always display the same, correct image.
   - Images should load quickly, with no fallback overlay unless absolutely necessary.
4. **Efficient API Usage:**  
   - Never generate the same image more than once.
   - Minimize API calls to keep costs low.
   - Use caching effectively.
5. **Robustness:**  
   - Ensure images persist across server restarts.
   - Handle cache read/write errors gracefully.

---

### Tasks

1. **Image-Card Mapping**
    - Maintain a mapping (e.g., in a database or JSON file) linking each card’s unique identifier to its image file path.
    - On card reveal, always fetch the image using this mapping.

2. **Use Existing Images First**
    - On server startup or card reveal, check if an existing image is available for the card.
    - If the image exists, use it immediately.

3. **Generate Missing Images**
    - If a card image is missing, generate it using the OpenAI API.
    - Ensure the prompt to the API specifies that the image must match the style and colour format of the existing card fronts.
    - Save the new image to `/cache/images/` and update the mapping.

4. **Cache Validation & Error Handling**
    - If the image file or metadata is missing/corrupt, re-generate and re-cache the image.
    - Log and handle errors without showing a broken or fallback image overlay unless absolutely necessary.
    - Optionally, implement a “loading” spinner only while the correct image is fetched or regenerated.

5. **Optimize Loading**
    - Preload all card images on server startup (or batch preload during low-traffic periods) to ensure fast access.
    - Serve images via a fast static file server or CDN if possible.

6. **API Efficiency**
    - Double-check that the generateCardImage logic never triggers multiple API calls for the same card.
    - If concurrent requests for the same card image occur, ensure only one API call is made and the result is shared.

7. **Testing**
    - Test with a clean cache and with a full cache.
    - Simulate server restarts to confirm images persist.
    - Confirm that each card always displays the same image.

---

### Example Code Logic (Pseudocode)

```javascript
// On card reveal:
const cardId = card.uniqueId;
const mapping = JSON.parse(fs.readFileSync('cardImageMap.json'));
const imageFilePath = mapping[cardId];

if (imageFilePath && fs.existsSync(imageFilePath)) {
  // Use existing image
  return imageFilePath;
} else {
  // Generate new image in the same style and colour format
  const newImage = await generateImageForCard(card, {
    styleReference: 'existing_card_fronts',
    colorPalette: 'match_existing'
  });
  fs.writeFileSync(`/cache/images/${cardId}.png`, newImage);
  mapping[cardId] = `/cache/images/${cardId}.png`;
  fs.writeFileSync('cardImageMap.json', JSON.stringify(mapping));
  return mapping[cardId];
}
```

---

### Acceptance Criteria

- Every Tarot card always shows the same image, loaded quickly.
- Existing images are always used first.
- New images are only generated for cards missing an image, and always match the style and colour of the existing set.
- No fallback overlays unless image is truly unavailable.
- Minimal, non-redundant API calls.
- Images persist and load correctly after server restarts.

---

**Ready to empower your Tarot app with a seamless, professional image experience! Let me know if you need this tailored for your tech stack or workflow.**

---
Answer from Perplexity: pplx.ai/share